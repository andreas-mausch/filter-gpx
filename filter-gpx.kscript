#!/usr/bin/env kscript

@file:DependsOn("io.jenetics:jpx:1.5.2")

import io.jenetics.jpx.*
import java.time.Duration
import java.time.Duration.between

fun isInArea(point: Point): Boolean {
    return point.latitude.toDouble() >= 53.557766
        && point.latitude.toDouble() <= 53.559691
        && point.longitude.toDouble() >= 9.928761
        && point.longitude.toDouble() <= 9.932033
}

fun durationInArea(points: List<Point>): List<Pair<Point,Point>> {
    val sortedPoints = points.toMutableList()
    sortedPoints.sortBy { it.time.get() }

    var entryPoint: Point? = null
    var pairs = mutableListOf<Pair<Point, Point>>()

    sortedPoints.forEach {
        if (entryPoint == null && isInArea(it)) {
            entryPoint = it
        } else if (entryPoint != null && !isInArea(it)) {
            pairs.add(Pair(entryPoint!!, it))
            entryPoint = null
        }
    }

    if (entryPoint != null) {
        pairs.add(Pair(entryPoint!!, sortedPoints.last()))
    }

    return pairs
}

fun Iterable<Duration>.sum(): Duration {
    return this.fold(Duration.ofSeconds(0)) { sum, element -> sum.plus(element) }
}

val track = GPX.reader(GPX.Version.V10)
               .read("gpx.xml")
               .tracks
               .filter { it.name.isPresent() && it.name.get() == "SM-G973F" }

val points = track.flatMap { it.segments }.flatMap { it.points }
val groupedByDate = points.groupBy { it.time.get().toLocalDate() }

groupedByDate.forEach {
    val pairs = durationInArea(it.value)
    val duration = pairs.map { between(it.first.time.get(), it.second.time.get()) }.sum()
    println("${it.key}: ${duration} (${it.value.size} Points)")
}
